<?php
/**
 * @file
 * Drupal database deploy module
 *
 * Make deployment via git much easier.
 */
 
/**
 * Implements hook_node_update().
 */
function drupal_deploy_node_update($node) {
  $op = 'node_update';
  drupal_deploy_save_transaction('node', $op, $node);
}

/**
 * Implements hook_node_insert().
 */
function drupal_deploy_node_insert($node) {
  $op = 'node_insert';
  drupal_deploy_save_transaction('node', $op, $node);
}

/**
 * Implements hook_node_delete().
 */
function drupal_deploy_node_delete($node) {
  $op = 'node_delete';
  drupal_deploy_save_transaction('node', $op, $node);
}

/**
 * Implements hook_node_revision_delete().
 */
function drupal_deploy_node_revision_delete($node) {
  $op = 'node_revision_delete';
  drupal_deploy_save_transaction('node', $op, $node);
}

/**
 *
 */
function drupal_deploy_save_transaction($type, $op, $store) {
  $root_dir = variable_get('drupal_deploy_path_to_transations', 'private://drupal_deploy/');

  $type_dir = $root_dir . DIRECTORY_SEPARATOR . $type;

  file_prepare_directory($type_dir, FILE_CREATE_DIRECTORY);

  $transaction_file = $type_dir . DIRECTORY_SEPARATOR . microtime(TRUE) * 10000;

  $data = array(
    'op' => $op,
    'data' => $store,
  );
  file_unmanaged_save_data(serialize($data), $transaction_file);
}


function drupal_deploy_export_pretty_json($json) {
  $result      = '';
  $pos         = 0;
  $strLen      = strlen($json);
  $indentStr   = '  ';
  $newLine     = "\n";
  $prevChar    = '';
  $outOfQuotes = true;

  for ($i=0; $i<=$strLen; $i++) {
    $char = $json[$i];
    
    if ($char == '"' && $prevChar != '\\') 
    {
      $outOfQuotes = !$outOfQuotes;
    }
    else if(($char == '}' || $char == ']') && $outOfQuotes)
    {
      $result .= $newLine;
      $pos --;
      for ($j = 0; $j < $pos; $j++) {
        $result .= $indentStr;
      }
    }

    $result .= $char;

    if (($char == ',' || $char == '{' || $char == '[') && $outOfQuotes)
    {
      $result .= $newLine;
      if ($char == '{' || $char == '[') {
        $pos ++;
      }

      for ($j = 0; $j < $pos; $j++) {
        $result .= $indentStr;
      }
    }

    $prevChar = $char;
  }

  return $result;
}


if (!defined("JSON_NUMERIC_CHECK")) {
  define("JSON_NUMERIC_CHECK", 32);      // 5.3.3
}

if (!defined("JSON_UNESCAPED_SLASHES")) {
  define("JSON_UNESCAPED_SLASHES", 64);
}
if (!defined("JSON_HEX_TAG")) {
  define("JSON_HEX_TAG", 1);
  define("JSON_HEX_AMP", 2);
  define("JSON_HEX_APOS", 4);
  define("JSON_HEX_QUOT", 8);
}

function dd_json_encode_pretty_utf8($var, $options=0, $_indent="", $key = TRUE) {
  global ${'.json_last_error'};
  ${'.json_last_error'} = JSON_ERROR_NONE;
        
  #-- prepare JSON string
  list($_space, $_tab, $_nl) = array(" ", "    $_indent", "\n");
  $json = "$_indent";

  if (is_string($var) and is_numeric($var)) {
    $var = (strpos($var, ".") || strpos($var, "e")) ? floatval($var) : intval($var);
  }
  
  #-- add array entries
  if (is_array($var) || ($obj=is_object($var))) {
     #-- check if array is associative
     if (!$obj) {
        $keys = array_keys((array)$var);
        $obj = !($keys === array_keys($keys));   // keys must be in 0,1,2,3, ordering, but PHP treats integers==strings otherwise
     }

     #-- concat individual entries
     $empty = 0; $json = "";
     foreach ((array)$var as $i=>$v) {
        $json .= ($empty++ ? ",$_nl" : "")    // comma separators
               . $_tab . ($obj ? ( dd_json_encode_pretty_utf8($i, $options , $_tab) . ":$_space") : "")   // assoc prefix
               . ( dd_json_encode_pretty_utf8($v, $options, $_tab, FALSE));    // value
     }

     #-- enclose into braces or brackets
     $json = $obj ? "{"."$_nl$json$_nl$_indent}" : "[$_nl$json$_nl$_indent]";
  }

  #-- strings need some care
  elseif (is_string($var)) {
    $rewrite = array(
         "\\" => "\\\\",
         "\"" => "\\\"",
       "\010" => "\\b",
         "\f" => "\\f",
         "\n" => "\\n",
         "\r" => "\\r", 
         "\t" => "\\t",
         "/"  => $options & JSON_UNESCAPED_SLASHES ? "/" : "\\/",
         "<"  => $options & JSON_HEX_TAG  ? "\\u003C" : "<",
         ">"  => $options & JSON_HEX_TAG  ? "\\u003E" : ">",
         "'"  => $options & JSON_HEX_APOS ? "\\u0027" : "'",
         "\"" => $options & JSON_HEX_QUOT ? "\\u0022" : "\"",
         "&"  => $options & JSON_HEX_AMP  ? "\\u0026" : "&",
         '"'  => '\"',
       "\x08" => "\\f",
       "\x0c" => "\\b",
       
     );
    $var = strtr($var, $rewrite);
    if (function_exists("iconv")) {
      $var = preg_replace("/[\\x00-\\x1F\\x7F]/ue", "'\\u'.current(unpack('H*', iconv('UTF-8', 'UCS-2BE', '$0')))", $var);
    }
    $json = '"' . $var . '"';
  }

  #-- basic types
  elseif (is_bool($var)) {
    $json = $var ? "true" : "false";
  }
  elseif ($var === NULL) {
    $json = "null";
  }
  elseif (is_int($var)) {
    if(!$key){
      $json = "$var";
    }else{
      $json = '"' . $var . '"';
    }
  }
  elseif (is_float($var)) {
    if (is_nan($var) || is_infinite($var)) {
      ${'.json_last_error'} = JSON_ERROR_INF_OR_NAN;
      return;
    }
    else {
      $json = "$var";
    }
  }

  #-- something went wrong
  else {
    trigger_error("json_encode: don't know what a '" .gettype($var). "' is.", E_USER_WARNING);
    ${'.json_last_error'} = JSON_ERROR_UNSUPPORTED_TYPE;
    return;
  }
  
  #-- done
  return($json);
}

function drupal_deploy_export_save($items, $filename = ''){
  $data = dd_json_encode_pretty_utf8($items);
  if(file_put_contents($filename, $data)){
    drush_log(dt('Exported to file !filename', array('!filename' => $filename)),'ok');
  }
}

/*
 * API Functions
 */

function dde_get_user_name($uid){
  $user = db_select('users', 'u')
    ->fields('u')
    ->condition('u.uid', $uid)
    ->execute()
    ->fetchObject();
  return $user->name;
}

function ddi_get_user_id($name){
  $user = db_select('users', 'u')
    ->fields('u')
    ->condition('u.name', $name)
    ->execute()
    ->fetchObject();
    
  if(!empty($user))
  {
    return $user->uid;
  }
  return 0;
}


function dde_get_format_name($format){
  $format = db_select('filter_formats', 'ff')
    ->fields('ff')
    ->condition('ff.format', $format)
    ->execute()
    ->fetchObject();

  return $format->name;
}

function ddi_get_format_id($format){
  $format = db_select('filter_formats', 'ff')
    ->fields('ff')
    ->condition('ff.name', $format)
    ->execute()
    ->fetchObject();

  if(!empty($format)){
    return $format->format;
  }else{
    return FILTER_FORMAT_DEFAULT;
  }
}

function dde_menu_alias($path){
  $alias = db_select('url_alias', 'ua')
    ->fields('ua')
    ->condition('ua.source', $path)
    ->execute()
    ->fetchObject();
    
  if(!empty($alias)){
    return $alias->alias;
  }
  
  $node_link = explode('/', $path);
  if($node_link[0] == 'node' && is_numeric($node_link[1])){
    $node = db_select('node', 'n')
      ->fields('n')
      ->condition('n.nid', $node_link[1])
      ->execute()
      ->fetchObject();
    return array(
      'title' => $node->title,
      'type' => $node->type,
      'created' => $node->created,
      'username' => dde_get_user_name($node->uid),
    );
  }
  return $path;
}

function ddi_menu_alias_origin($path){
  $alias = db_select('url_alias', 'ua')
    ->fields('ua')
    ->condition('ua.alias', $path)
    ->execute()
    ->fetchObject();
    
  if(!empty($alias)){
    return $alias->source;
  }
  return $path;   
}

function dde_files_to_export($op, $fid = NULL){
  static $files;
  if($op == 'export' && !empty($fid)){
    if(!isset($files[$fid])){
      $file = db_select('files', 'f')
        ->fields('f')
        ->condition('f.fid', $fid)
        ->execute()
        ->fetchObject();
        
      $file->username = dde_get_user_name($file->uid);
      unset($file->uid);
      unset($file->fid);      
      $files[$fid] = $file; 
      return $file;
    }
  }
  if($op == 'get'){
    return $files;
  }
}

function dde_files_imported($op, $file){
  static $files;
  if($op == 'set'){
    if(!isset($files[$file['filepath']])){
      $files[$file['filepath']] = $file;
    }
  }
  if($op == 'get'){
    return $files[$file['filepath']];
  }
}

function dde_fields($entity_type, $bundle_name){
  
  $result = array('fields' => array(), 'instances' => array());
  $all_fields = field_info_fields();
  
  $field_instances = field_info_instances($entity_type, $bundle_name);
  foreach($field_instances as $name => $settings){
    unset($field_instances[$name]['id']);
    unset($field_instances[$name]['field_id']);    
    unset($field_instances[$name]['entity_type']);    
    unset($field_instances[$name]['bundle']);   
    $result['fields'][$name] =  $all_fields[$name];
  }
  $result['instances'] = $field_instances;
  return $result;
}

function ddi_fields($fields, $entity_type, $bundle_name){
  if(empty($fields['fields'])){
    return;
  }
  foreach ($fields['fields'] as $field_name => $field) {
    if(!module_exists($field['module'])){
      drush_log(dt('!field_name field could not be created because the module !module is disabled or missing.', array('!field_name' => $field_name, '!module' => $field['module'])), 'error');
      continue;
    }
    if (isset($fields['instances'][$field_name])) {
      // Create or update field.
      $exists_field = field_read_field($field_name, array('include_inactive' => TRUE));
      if (!$exists_field) {
        field_create_field($field);
        drush_log(dt('!field_name field has been created.', array('!field_name' => $field_name)));
      }
      else {
        $field['id'] = $exists_field['id'];
        field_update_field($field);
        drush_log(dt('!field_name field has been updated.', array('!field_name' => $field_name)));
      }
      
      $instance = $fields['instances'][$field_name];
      // Make sure the needed key exists.
      if (!isset($instance['field_name'])) {
        continue;
      }

      $exists_instance = field_read_instance($entity_type, $field_name, $bundle_name);
      if (!$exists_instance) {
        $instance['entity_type'] = $entity_type;
        $instance['bundle'] = $bundle_name;
        field_create_instance($instance);
        drush_log(dt('!field_name instance has been created for !bundle in !entity_type.', array('!field_name' => $field_name, '!bundle' => $bundle_name, '!entity_type' => $entity_type)));
      }
      else {
        $instance['id'] = $exists_instance['id'];
        $instance['field_id'] = $exists_instance['field_id'];
        $instance['entity_type'] = $exists_instance['entity_type'];
        $instance['bundle'] = $exists_instance['bundle'];
        field_update_instance($instance);
        drush_log(dt('!field_name instance has been updated for !bundle in !entity_type.', array('!field_name' => $field_name, '!bundle' => $bundle_name, '!entity_type' => $entity_type)));
      }
    }
  }
}
